namespace random()
{
	func generate(min, max, result) as virtual
	{
		```
		try:
			print("scoreboard players set #RAND_MIN number %d" %int('ARG(min)'))
		except:
			if len('ARG(min)'.split(' ')) != 2:
				raise ValueError("Argument 'min' must be an integer or an '<entity> <scoreboard objective>' string.")
			print("scoreboard players operation #RAND_MIN number = ARG(min)")
		
		try:
			print("scoreboard players set #RAND_MAX number %d" %int('ARG(max)'))
		except:
			if len('ARG(max)'.split(' ')) != 2:
				raise ValueError("Argument 'max' must be an integer or an '<entity> <scoreboard objective>' string.")
			print("scoreboard players operation #RAND_MAX number = ARG(max)")
		
		if len('ARG(result)'.split(' ')) != 2:
			raise ValueError("Argument 'result' must be an '<entity> <scoreboard objective>' string.")
		```
		
		item replace block 0 0 0 container.0 with minecraft:potion
		item modify block 0 0 0 container.0 random:rand
		execute store result score ARG(result) run data get block 0 0 0 Items[0].tag.AttributeModifiers[0].Amount 10000
	}
	
	func rand_rate()
	{
		scoreboard players set #RAND_MIN number 0
		scoreboard players set #RAND_MAX number 99
		function ARG(_PATH)get_rand
	}
	
	func get_rand()
	{
		item replace block 0 0 0 container.0 with minecraft:potion
		item modify block 0 0 0 container.0 random:rand
		execute store result score #RAND_RESULT number run data get block 0 0 0 Items[0].tag.AttributeModifiers[0].Amount 10000
	}
}